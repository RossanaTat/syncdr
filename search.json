[{"path":"https://rossanatat.github.io/syncdr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 syncdr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/additional-options.html","id":"synchronizing-using-additional-options","dir":"Articles","previous_headings":"","what":"Synchronizing Using Additional Options","title":"Additional Sync Controls: Backup and Force","text":"retain control synchronization process, can utilize two additional options available synchronization functions: backup force. Backup Option: Setting backup = TRUE create backup (copy) right directory performing synchronization. backup stored location specified backup_dir. backup_dir provided, backup saved temporary directory (tempdir). ensures can revert previous state needed Force Option: default, force = TRUE, make functions proceed directly synchronization without user’s confirmation. However, avoid unintended changes directories, can set force = FALSE. way function first display preview proposed actions, including files copied deleted. prompted confirm whether wish proceed actions. Synchronization continue agree; otherwise, aborted, changes made directories. example, suppose performing full asymmetric synchronization , say, left right directories. type synchronization entails certain files copied right directory, well certain files deleted . maintain greater control process, can allow function perform synchronization simultaneously storing copy original directory changes occur. way, can revert original needed. Another option visualize preliminary check, synchronization takes place. can done taking advantage force option. Note prompt user confirmation work run function interactively R session. However, interactive prompt functional within article.","code":"# generate toy directories e     <- toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  .syncdrenv.1 <- syncdr:::copy_temp_environment()  # Get left and right directories' paths  left  <- .syncdrenv.1$left right <- .syncdrenv.1$right  sync_status <- compare_directories(left, right)  # call sync function full_asym_sync_to_right(sync_status = sync_status,                         backup      = TRUE) #> ✔ synchronized #> full_asym_sync_to_right(sync_status = sync_status,                         force      = FALSE) #> These files will be DELETED in right #>  #> |Files               |Action        | #> |:-------------------|:-------------| #> |/C/C1_duplicate.Rds |To be deleted | #> |/D/D3.Rds           |To be deleted | #> |/E/E1.Rds           |To be deleted | #> |/E/E2.Rds           |To be deleted | #> |/E/E3.Rds           |To be deleted | #> These files will be COPIED (overwriting if present) to right  #>  #>  #> |Files     |Action       | #> |:---------|:------------| #> |/A/A1.Rds |To be copied | #> |/A/A2.Rds |To be copied | #> |/A/A3.Rds |To be copied | #> |/B/B3.Rds |To be copied | #> Do you want to proceed? Type your answer (Yes/no/cancel)  #> ✔ synchronized #>   #You will need to type `no` or 'cancel' to stop the synchronization"},{"path":"https://rossanatat.github.io/syncdr/articles/asymmetric-synchronization.html","id":"what-is-asymmetric-synchronization","dir":"Articles","previous_headings":"","what":"What is asymmetric synchronization?","title":"Asymmetric Synchronization Functions","text":"one-way synchronization: master/leader directory, want changes made reflected secondary/follower directory. ⏭️ synchronization functions , note synchronization occurs left right. mean right directory mirror contents left directory. Key Points: using synchronization functions, two options providing inputs: Specify paths left right directories, set by_date by_content arguments desired (default: by_date = TRUE by_content = FALSE). First, use compare_directories() function generate sync_status object. , provide object input synchronization function. by_date by_content arguments automatically determined based sync_status.","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/asymmetric-synchronization.html","id":"types-of-asymmetric-synchronization","dir":"Articles","previous_headings":"","what":"Types of asymmetric synchronization","title":"Asymmetric Synchronization Functions","text":"syncdr allows perform specific set asymmetric synchronization actions, can choose one execute depending needs Types asymmetric synchronization Type synchronization Actions common files Actions non-common files Full asymmetric synchronization: full_asym_sync_to_right() comparing date (by_date = TRUE): Copy files newer left directory right directory. comparing date content (by_date = TRUE by_content = TRUE): Copy files newer different left directory right directory. comparing content (by_content = TRUE): Copy files different left directory right directory Copy right directory files exist left directory. Delete right directory files exclusive right directory (.e., missing left directory) Partial asymmetric synchronization -common files: common_files_asym_sync_to_right() by_date = TRUE : copy files newer left right date = TRUE by_content = TRUE: copy files newer different left right by_content = TRUE : copy files different left right Full asymmetric synchronization non common files update_missing_files_asym_to_right() copy files left right delete right files right (.e., files “right” words missing left) Partial asymmetric asymmetric synchronization non common files: partial_update_missing_files_asym_to_right() copy files left right keep right files right (.e., files ‘missing left’) Let’s see actions examples :","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/asymmetric-synchronization.html","id":"note-verbose-true","dir":"Articles","previous_headings":"Types of asymmetric synchronization","what":"*️⃣ Note: verbose = TRUE","title":"Asymmetric Synchronization Functions","text":"executing synchronization, option enable verbose mode setting verbose = TRUE. display tree structure directories synchronization 1 - Full asymmetric synchronization: 2 - Partial asymmetric synchronization -common files: 3 - Full asymmetric synchronization -non common files: 4 - Partial asymmetric synchronization -non common files:","code":"# With leader/master directory being the left directory  # Option 1  full_asym_sync_to_right(left_path  = left,                         right_path = right,                         by_content = TRUE) #> ✔ synchronized #>  # Option 2 sync_status <- compare_directories(left_path  = left,                                    right_path = right,                                    by_content = TRUE)  full_asym_sync_to_right(sync_status = sync_status) #> ✔ synchronized #>   # With leader/master directory being the right directory  sync_status <- compare_directories(left_path  = right,  #notice args changing here                                    right_path = left,                                    by_content = TRUE)  full_asym_sync_to_right(sync_status = sync_status) #> ✔ synchronized #> sync_status <- compare_directories(left_path  = left,                                    right_path = right)  common_files_asym_sync_to_right(sync_status = sync_status) #> ✔ synchronized #> sync_status <- compare_directories(left_path  = left,                                    right_path = right)  update_missing_files_asym_to_right(sync_status = sync_status) #> ✔ synchronized #> sync_status <- compare_directories(left_path  = left,                                    right_path = right)  partial_update_missing_files_asym_to_right(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/articles/asymmetric-synchronization.html","id":"synchronizing-using-additional-options","dir":"Articles","previous_headings":"","what":"Synchronizing Using Additional Options","title":"Asymmetric Synchronization Functions","text":"retain control synchronization process, can utilize two additional options available synchronization functions: backup force. Backup Option: Setting backup = TRUE create backup (copy) right directory performing synchronization. backup stored location specified backup_dir. backup_dir provided, backup saved temporary directory (tempdir). ensures can revert previous state needed Force Option: default, force = TRUE, means function proceed directly synchronization without interruptions. set force = FALSE, function first display preview proposed actions, including files copied deleted. prompted confirm whether wish proceed actions. Synchronization continue agree; otherwise, aborted, changes made directories.","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/symmetric-synchronization.html","id":"what-is-symmetric-synchronization","dir":"Articles","previous_headings":"","what":"What is symmetric synchronization?","title":"Symmetric Synchronization","text":"two-way synchronization: means compare directories update reflect latest changes: file added, modified, deleted one directory, corresponding action taken directory. approach useful want directories always --date latest changes, regardless changes originate. keep mind: calling synchronization functions, can provide inputs two alternative ways: Specify paths left right directories, well `by_date` `by_content` arguments wish synchronization performed (specified, default `by_date = TRUE` `by_content` = FALSE) First call workhorse function `compare_directories()` obtain sync_status object. , provide input synchronization function. need specify ‘by_date’ ‘by_content’ arguments, automatically determined depending ‘sync_status’.","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/symmetric-synchronization.html","id":"types-of-symmetric-synchronization","dir":"Articles","previous_headings":"","what":"Types of symmetric synchronization","title":"Symmetric Synchronization","text":"Similar asymmetric counterpart, syncdr enables execution specific symmetric synchronizations predefined options, allowing select suitable function based requirements. Types symmetric synchronization Type synchronization Actions common files Actions non-common files Full symmetric synchronization: full_symmetric_sync() by_date = TRUE : file one directory newer corresponding file directory copied update older version modification dates , change made by_date = TRUE by_content = TRUE: file one directory newer different corresponding file directory, copied update older version. modification dates/contents , change made by_content = TRUE : action by_date = TRUE : file one directory newer corresponding file directory, copied update older version. modification dates , action executed by_date = TRUE by_content = TRUE: file one directory newer different corresponding file directory, copied update older version modification dates/contents , nothing done by_content = TRUE : action changes made: keep right files right keep left left Let’s consider following examples:","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/symmetric-synchronization.html","id":"note-verbose-true","dir":"Articles","previous_headings":"Types of symmetric synchronization","what":"*️⃣ Note: verbose = TRUE","title":"Symmetric Synchronization","text":"asymmetric synchronization, also option enable verbose mode setting verbose = TRUE. display tree structure directories synchronization. 1 - Full symmetric synchronization: comparing directories date content: comparing directories date : 2 - Partial symmetric synchronization:","code":"sync_status <- compare_directories(left_path  = left,                                    right_path = right,                                    by_content = TRUE)  # Providing left and right paths object # full_symmetric_sync(left, right)  # Providing sync_status object full_symmetric_sync(sync_status = sync_status) #> ✔ synchronized #> sync_status <- compare_directories(left_path  = left,                                    right_path = right)  # Example with left and right paths  full_symmetric_sync(left_path = left,                     right_path = right) #> ✔ synchronized #> sync_status <- compare_directories(left_path  = left,                                    right_path = right)  partial_symmetric_sync_common_files(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"why-syncdr","dir":"Articles","previous_headings":"","what":"Why {syncdr}?","title":"Introduction to {syncdr}","text":"{syncdr} R package handling synchronizing files directories. primary objectives : provide clear snapshot content status synchronization two directories comparison: including tree structure, common files, files exclusive either directory make file organization management R easier: .e., enabling content-based modification date-based file comparisons, well facilitating tasks duplicates identification, file copying, moving, deletion. 💡 article offer comprehensive overview {syncdr} functionalities. Rather provides sample workflow working package’s main functions . familiarizing general workflow, read articles throughout rest website -explore features {syncdr} structured way.","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"synchronizing-with-syncdr","dir":"Articles","previous_headings":"","what":"Synchronizing with {syncdr}","title":"Introduction to {syncdr}","text":"Learn work {syncdr} compare synchronize directories R Suppose working two directories, let’s call left right -containing certain files folders/sub-folders. Let’s first call syncdr function toy_dirs(). generates two toy directories .syncdrenv environment -say left right- can use showcase syncdr functionalities. can start quickly comparing two directories’ tree structure calling display_dir_tree(). default, fully recurses -.e., shows directory tree sub-directories. However, can also specify number levels recurse using recurse argument.","code":"# Create syncdr env with left and right directories .syncdrenv =toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  # Get left and right directories' paths  left  <- .syncdrenv$left right <- .syncdrenv$right # Visualize left and right directories' tree structure  display_dir_tree(path_left  = left,                  path_right = right) #> (←)Left directory structure: #> /tmp/RtmpIpEqry/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   └── D2.Rds #> └── E #> (→)Right directory structure: #> /tmp/RtmpIpEqry/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"step-1-compare-directories","dir":"Articles","previous_headings":"Synchronizing with {syncdr}","what":"Step 1: Compare Directories","title":"Introduction to {syncdr}","text":"important function syncdr compare_directories(). takes paths left right directories compares determine synchronization status (see ). function represents backbone syncdr: can utilize syncdr_status object generates : inspect synchronization status files present directories well exclusive either directory input functions within syncdr allow synchronization directories comparison. diving resulting syncdr_status object, note compare_directories() enables compare directories 3 ways: date -default: default, by_date = TRUE, files directories compared based date last modification. date content. done specifying by_content = TRUE (default by_date = TRUE specifically set FALSE). Files first compared date, newer either directory compared content. content , specifying by_date = FALSE by_content = TRUE . option however discouraged -comparing files’ contents can slow computationally expensive. Also, regardless options choose, sync_status files exclusive either directory determined : Let’s now take closer look output compare_directories(), intended contain comprehensive information directories comparison. list class syncdr_status, containing 4 elements: (1) common files, (2) non common files, (3) left path (4) right path","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"comparing-by-date","dir":"Articles","previous_headings":"Synchronizing with {syncdr} > Step 1: Compare Directories","what":"1. Comparing by date","title":"Introduction to {syncdr}","text":"","code":"# Compare by date only -the Default sync_status_date <- compare_directories(left,                                          right)  sync_status_date #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpIpEqry/left #> • Right Directory: /tmp/RtmpIpEqry/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: date #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path modification_time_left modification_time_right modified #> 1 /left/B/B1.Rds    2024-10-30 16:51:30     2024-10-30 16:51:31    right #> 2 /left/B/B2.Rds    2024-10-30 16:51:33     2024-10-30 16:51:34    right #> 3 /left/C/C1.Rds    2024-10-30 16:51:31     2024-10-30 16:51:37    right #> 4 /left/C/C2.Rds    2024-10-30 16:51:34     2024-10-30 16:51:35    right #> 5 /left/C/C3.Rds    2024-10-30 16:51:36     2024-10-30 16:51:37    right #> 6 /left/D/D1.Rds    2024-10-30 16:51:33     2024-10-30 16:51:32     left #> 7 /left/D/D2.Rds    2024-10-30 16:51:36     2024-10-30 16:51:35     left #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #> ── Only in right ── #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"comparing-by-date-and-content","dir":"Articles","previous_headings":"Synchronizing with {syncdr} > Step 1: Compare Directories","what":"2. Comparing by date and content","title":"Introduction to {syncdr}","text":"","code":"# Compare by date and content  sync_status_date_content <- compare_directories(left,                                                  right,                                                 by_content = TRUE)  sync_status_date_content #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpIpEqry/left #> • Right Directory: /tmp/RtmpIpEqry/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: date & content #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path modification_time_left modification_time_right modified #> 1 /left/B/B1.Rds    2024-10-30 16:51:30     2024-10-30 16:51:31    right #> 2 /left/B/B2.Rds    2024-10-30 16:51:33     2024-10-30 16:51:34    right #> 3 /left/C/C1.Rds    2024-10-30 16:51:31     2024-10-30 16:51:37    right #> 4 /left/C/C2.Rds    2024-10-30 16:51:34     2024-10-30 16:51:35    right #> 5 /left/C/C3.Rds    2024-10-30 16:51:36     2024-10-30 16:51:37    right #> 6 /left/D/D1.Rds    2024-10-30 16:51:33     2024-10-30 16:51:32     left #> 7 /left/D/D2.Rds    2024-10-30 16:51:36     2024-10-30 16:51:35     left #>         sync_status #> 1 different content #> 2 different content #> 3      same content #> 4 different content #> 5 different content #> 6 different content #> 7 different content #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #> ── Only in right ── #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"comparing-by-content-only","dir":"Articles","previous_headings":"Synchronizing with {syncdr} > Step 1: Compare Directories","what":"3. Comparing by content only","title":"Introduction to {syncdr}","text":"","code":"# Compare by date and content  sync_status_content <- compare_directories(left,                                              right,                                             by_date    = FALSE,                                             by_content = TRUE)  sync_status_content #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpIpEqry/left #> • Right Directory: /tmp/RtmpIpEqry/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: content #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path       sync_status #> 1 /left/B/B1.Rds different content #> 2 /left/B/B2.Rds different content #> 3 /left/C/C1.Rds      same content #> 4 /left/C/C2.Rds different content #> 5 /left/C/C3.Rds different content #> 6 /left/D/D1.Rds different content #> 7 /left/D/D2.Rds different content #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #> ── Only in right ── #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"comparing-directories-with-verbose-true","dir":"Articles","previous_headings":"Synchronizing with {syncdr} > Step 1: Compare Directories","what":"*️⃣ Comparing directories with verbose = TRUE","title":"Introduction to {syncdr}","text":"calling compare_directories(), option enable verbose mode setting verbose = TRUE. display directories tree structure , comparing files content, provide progress updates including time spent hashing files.","code":"compare_directories(left,                     right,                     by_date    = FALSE,                     by_content = TRUE,                     verbose    = TRUE) #> ⠙ cli-147-153 #> ✔ B1.Rds [8ms] #>  #> ⠙ cli-147-153 #> ✔ B2.Rds [4ms] #>  #> ⠙ cli-147-153 #> ✔ C1.Rds [4ms] #>  #> ⠙ cli-147-153 #> ✔ C2.Rds [4ms] #>  #> ⠙ cli-147-153 #> ✔ C3.Rds [4ms] #>  #> ⠙ cli-147-153 #> ✔ D1.Rds [4ms] #>  #> ⠙ cli-147-153 #> ✔ D2.Rds [4ms] #>  #> ── Hashing completed! Total time spent: 0.08424258 secs ── #>  #> ⠙ cli-147-199 #> ✔ B1.Rds [4ms] #>  #> ⠙ cli-147-199 #> ✔ B2.Rds [4ms] #>  #> ⠙ cli-147-199 #> ✔ C1.Rds [7ms] #>  #> ⠙ cli-147-199 #> ✔ C2.Rds [4ms] #>  #> ⠙ cli-147-199 #> ✔ C3.Rds [4ms] #>  #> ⠙ cli-147-199 #> ✔ D1.Rds [4ms] #>  #> ⠙ cli-147-199 #> ✔ D2.Rds [4ms] #>  #> ── Hashing completed! Total time spent: 0.07325554 secs ── #>  #> (←)Left directory structure: #> /tmp/RtmpIpEqry/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   └── D2.Rds #> └── E #> (→)Right directory structure: #> /tmp/RtmpIpEqry/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpIpEqry/left #> • Right Directory: /tmp/RtmpIpEqry/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: content #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path       sync_status #> 1 /left/B/B1.Rds different content #> 2 /left/B/B2.Rds different content #> 3 /left/C/C1.Rds      same content #> 4 /left/C/C2.Rds different content #> 5 /left/C/C3.Rds different content #> 6 /left/D/D1.Rds different content #> 7 /left/D/D2.Rds different content #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #> ── Only in right ── #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"step-2-visualize-synchronization-status","dir":"Articles","previous_headings":"Synchronizing with {syncdr}","what":"Step 2: Visualize Synchronization Status","title":"Introduction to {syncdr}","text":"best way read output compare_directories() visualizing display_sync_status() function. example, let’s visualize sync status common files left right directories, compared date let’s display sync status non common files:","code":"display_sync_status(sync_status_date$common_files,                     left_path  = left,                     right_path = right) display_sync_status(sync_status_date$non_common_files,                     left_path  = left,                     right_path = right)"},{"path":"https://rossanatat.github.io/syncdr/articles/syncdr.html","id":"step-3-synchronize-directories","dir":"Articles","previous_headings":"Synchronizing with {syncdr}","what":"Step 3: Synchronize directories","title":"Introduction to {syncdr}","text":"syncdr enables users perform different actions copying, moving, deleting files using specific synchronization functions. Refer vignette(\"asymmetric-synchronization\") vignette(\"symmetric-synchronization\") articles detailed information. purpose general demonstration, perform ‘full asymmetric synchronization right’. specific function executes following: date (by_date = TRUE): Copy files newer left directory right directory. date content (by_date = TRUE by_content = TRUE): Copy files newer different left directory right directory. content (by_content = TRUE): Copy files different left directory right directory. Copy right directory files exist left directory Delete right directory files exclusive right directory (.e., missing left directory)","code":"# Compare directories  sync_status <- compare_directories(left,                                    right,                                    by_date = TRUE)  # Synchronize directories  full_asym_sync_to_right(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/articles/visualizations.html","id":"visualize-synchronization-status","dir":"Articles","previous_headings":"","what":"Visualize synchronization status","title":"Visualizations","text":"comparing directories, say left right, use display_sync_status() effective comparison visualization. function syncdr, call compare_directories() first:","code":""},{"path":"https://rossanatat.github.io/syncdr/articles/visualizations.html","id":"example-when-comparing-directories-by-date-content","dir":"Articles","previous_headings":"Visualize synchronization status","what":"Example when comparing directories by date & content","title":"Visualizations","text":"display_sync_status() allows visualize synchronization status either (1) common files (2) non common files, can see examples :","code":"library(syncdr)  # Create syncdr env with left and right directories .syncdrenv =toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  # Get left and right directories' paths  left  <- .syncdrenv$left right <- .syncdrenv$right sync_status <- compare_directories(left,                                     right,                                    by_content = TRUE) display_sync_status(sync_status$common_files,                     left_path  = left,                     right_path = right) display_sync_status(sync_status$non_common_files,                     left_path  = left,                     right_path = right)"},{"path":"https://rossanatat.github.io/syncdr/articles/visualizations.html","id":"visualize-directories-structure","dir":"Articles","previous_headings":"","what":"Visualize directories structure","title":"Visualizations","text":"Moreover, option utilize display_dir_tree() swift overview directory(ies) structure, whether single directory simultaneously.","code":"# Tree structure or right directory display_dir_tree(path_left = left) #> (←)Left directory structure: #> /tmp/RtmplbCwoF/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   └── D2.Rds #> └── E  # Tree structure of left directory display_dir_tree(path_right = right) #> (→)Right directory structure: #> /tmp/RtmplbCwoF/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds  # Tree structure of both  display_dir_tree(path_left = left, path_right = right, ) #> (←)Left directory structure: #> /tmp/RtmplbCwoF/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   └── D2.Rds #> └── E #> (→)Right directory structure: #> /tmp/RtmplbCwoF/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer. Rossana Tatulli. Author.","code":""},{"path":"https://rossanatat.github.io/syncdr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R, Tatulli R (2024). syncdr: Tool Facilitating Directory Comparison Updating. R package version 0.0.2, https://rossanatat.github.io/syncdr/.","code":"@Manual{,   title = {syncdr: Tool for Facilitating Directory Comparison and Updating},   author = {R.Andres Castaneda and Rossana Tatulli},   year = {2024},   note = {R package version 0.0.2},   url = {https://rossanatat.github.io/syncdr/}, }"},{"path":"https://rossanatat.github.io/syncdr/index.html","id":"syncdr","dir":"","previous_headings":"","what":"Tool for Facilitating Directory Comparison and Updating","title":"Tool for Facilitating Directory Comparison and Updating","text":"{syncdr} R package designed facilitate process directory comparison synchronization. package provides essential tools users need manage synchronize directories effectively. {syncdr}, users can: Visualize Directory Structures: Gain comprehensive view directory contents, including tree structure, common files, files unique directory. Manage Files Ease: Perform content-based modification date-based file comparisons, handle tasks like identifying duplicates, copying, moving, deleting files seamlessly within R environment. incorporating {syncdr} workflow, users can achieve organized --date file system, simplifying overall management synchronization directories.","code":""},{"path":"https://rossanatat.github.io/syncdr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tool for Facilitating Directory Comparison and Updating","text":"can install development version syncdr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"RossanaTat/syncdr\")"},{"path":"https://rossanatat.github.io/syncdr/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage example","title":"Tool for Facilitating Directory Comparison and Updating","text":"","code":"library(syncdr)  # Generate toy directories to show package usage  # --- Create .syncdrenv --- # .syncdrenv <- toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s left       <- .syncdrenv$left right      <-  .syncdrenv$right  # --- Compare synchronization status of the two directories --- # # comparing by date of last modification sync_status <- compare_directories(left_path   = left,                                    right_path  = right)  # --- Display synchronization status --- # # visualize sync status in nice table -for example, of common files display_sync_status(sync_status$common_files,                     left_path  = left,                     right_path = right) # --- Perform synchronization action --- # # asymmetric snchronization from left to right  #full_asym_sync_to_right(sync_status)"},{"path":"https://rossanatat.github.io/syncdr/reference/common_files_asym_sync_to_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","title":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","text":"Partially synchronize right directory based left one -.e., function : common_files: date : copy files newer left right date content: copy files newer different left right content : copy files different left right non common files, nothing changes: .e., disregard files left keep right files right (.e., files 'missing left')","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/common_files_asym_sync_to_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","text":"","code":"common_files_asym_sync_to_right(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   by_date = TRUE,   by_content = FALSE,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/common_files_asym_sync_to_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). by_date logical, TRUE default by_content logical, FALSE default recurse logical, TRUE default. recurse TRUE: copying file source folder destination folder, file copied corresponding (sub)directory. sub(directory) file located exist destination folder (sure), set recurse FALSE, file copied top level force Logical. TRUE (default), directly perform synchronization directories. FALSE, Displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/common_files_asym_sync_to_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/common_files_asym_sync_to_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial asymmetric synchronization to right (update common files) — common_files_asym_sync_to_right","text":"","code":"# Compare directories with 'compare_directories()' e <- toy_dirs() #> ■■■■■■■■■■■■■■■                   47% | ETA:  5s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  1s  # Get left and right directories' paths left  <- e$left right <- e$right  # Example: Synchronize by content only # Option 1 common_files_asym_sync_to_right(left_path  = left,                                 right_path = right,                                 by_date    = FALSE,                                 by_content = TRUE) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Directories for Synchronization Status — compare_directories","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"function compares two directories, typically referred 'left' 'right', determine synchronization status file level. primary goal identify synchronization status files present directories exclusive either directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"","code":"compare_directories(   left_path,   right_path,   recurse = TRUE,   by_date = TRUE,   by_content = FALSE,   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"left_path Path left/first directory. right_path Path right/second directory. recurse TRUE, fully recurses subdirectories. positive integer, specifies number levels recurse. by_date Logical. TRUE (default), compares directories based modification date common files. by_content Logical. TRUE, compares directories based hashed content common files. Default FALSE verbose Logical. TRUE display additional info comparison process. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"list class \"syncdr_status\" containing following elements: Non-common files: Paths synchronization status files exclusive either directory. Common files: Paths synchronization status files present directories. Path left directory. Path right directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":"sync-status-types","dir":"Reference","previous_headings":"","what":"Sync Status Types","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"synchronization status determined files present directories, well files exclusive either directory. can computed based modification date , content , . Common Files: comparing date: 'new', 'old', ''. comparing date content: 'new different', 'new ', 'old different', 'old ', 'different', ''. comparing content : 'different' ''. Non-Common Files: comparing date (date content, content ): 'left' 'right'.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_directories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Directories for Synchronization Status — compare_directories","text":"","code":"# Compare directories with 'compare_directories()' e <- toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  # Get left and right directories' paths left  <- e$left right <- e$right compare_directories(left, right) #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpuqzsSS/left #> • Right Directory: /tmp/RtmpuqzsSS/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: date #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path modification_time_left modification_time_right modified #> 1 /left/B/B1.Rds    2024-10-30 16:49:44     2024-10-30 16:49:45    right #> 2 /left/B/B2.Rds    2024-10-30 16:49:47     2024-10-30 16:49:48    right #> 3 /left/C/C1.Rds    2024-10-30 16:49:45     2024-10-30 16:49:51    right #> 4 /left/C/C2.Rds    2024-10-30 16:49:48     2024-10-30 16:49:49    right #> 5 /left/C/C3.Rds    2024-10-30 16:49:50     2024-10-30 16:49:51    right #> 6 /left/D/D1.Rds    2024-10-30 16:49:47     2024-10-30 16:49:46     left #> 7 /left/D/D2.Rds    2024-10-30 16:49:50     2024-10-30 16:49:49     left #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #>  #> ── Only in right ── #>  #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds           # Compare by date and content compare_directories(left, right, by_content = TRUE) #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpuqzsSS/left #> • Right Directory: /tmp/RtmpuqzsSS/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: date & content #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path modification_time_left modification_time_right modified #> 1 /left/B/B1.Rds    2024-10-30 16:49:44     2024-10-30 16:49:45    right #> 2 /left/B/B2.Rds    2024-10-30 16:49:47     2024-10-30 16:49:48    right #> 3 /left/C/C1.Rds    2024-10-30 16:49:45     2024-10-30 16:49:51    right #> 4 /left/C/C2.Rds    2024-10-30 16:49:48     2024-10-30 16:49:49    right #> 5 /left/C/C3.Rds    2024-10-30 16:49:50     2024-10-30 16:49:51    right #> 6 /left/D/D1.Rds    2024-10-30 16:49:47     2024-10-30 16:49:46     left #> 7 /left/D/D2.Rds    2024-10-30 16:49:50     2024-10-30 16:49:49     left #>         sync_status #> 1 different content #> 2 different content #> 3      same content #> 4 different content #> 5 different content #> 6 different content #> 7 different content #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #>  #> ── Only in right ── #>  #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds           # Compare by content only compare_directories(left, right, by_content = TRUE, by_date = FALSE) #>  #> ── Synchronization Summary ───────────────────────────────────────────────────── #> • Left Directory: /tmp/RtmpuqzsSS/left #> • Right Directory: /tmp/RtmpuqzsSS/right #> • Total Common Files: 7 #> • Total Non-common Files: 9 #> • Compare files by: content #>  #> ── Common files ──────────────────────────────────────────────────────────────── #>             path       sync_status #> 1 /left/B/B1.Rds different content #> 2 /left/B/B2.Rds different content #> 3 /left/C/C1.Rds      same content #> 4 /left/C/C2.Rds different content #> 5 /left/C/C3.Rds different content #> 6 /left/D/D1.Rds different content #> 7 /left/D/D2.Rds different content #>  #> ── Non-common files ──────────────────────────────────────────────────────────── #>  #> ── Only in left ── #>  #> # A tibble: 4 × 1 #>   path_left      #>   <fs::path>     #> 1 /left/A/A1.Rds #> 2 /left/A/A2.Rds #> 3 /left/A/A3.Rds #> 4 /left/B/B3.Rds #>  #> ── Only in right ── #>  #> # A tibble: 5 × 1 #>   path_right                #>   <fs::path>                #> 1 /right/C/C1_duplicate.Rds #> 2 /right/D/D3.Rds           #> 3 /right/E/E1.Rds           #> 4 /right/E/E2.Rds           #> 5 /right/E/E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/reference/compare_file_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare contents of two files and determine synchronization status — compare_file_contents","title":"Compare contents of two files and determine synchronization status — compare_file_contents","text":"function compares contents two files located specified paths determines synchronization status based content","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_file_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare contents of two files and determine synchronization status — compare_file_contents","text":"","code":"compare_file_contents(   path_left,   path_right,   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/compare_file_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare contents of two files and determine synchronization status — compare_file_contents","text":"path_left character string specifying path file left directory. path_right character string specifying path file right directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_file_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare contents of two files and determine synchronization status — compare_file_contents","text":"list containing following components: is_diff Logical. Indicates whether contents two files different (TRUE) identical (FALSE). sync_status_content Character. Describes synchronization status two files based content: - \"different content\": Contents files identical. - \"content\": Contents files identical.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_modification_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare modification times of two files and determine synchronization status — compare_modification_times","title":"Compare modification times of two files and determine synchronization status — compare_modification_times","text":"function compares date last modification two files determines synchronization status","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_modification_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare modification times of two files and determine synchronization status — compare_modification_times","text":"","code":"compare_modification_times(modification_time_left, modification_time_right)"},{"path":"https://rossanatat.github.io/syncdr/reference/compare_modification_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare modification times of two files and determine synchronization status — compare_modification_times","text":"modification_time_left modification time file left directory modification_time_right modification time file right directory","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/compare_modification_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare modification times of two files and determine synchronization status — compare_modification_times","text":"list containing following components: is_new_left Logical. Indicates file left directory newer (.e., later modification time) file right directory is_new_right Logical. Indicates file right directory newer (.e., later modification time) file left directory sync_status_date Character. Describes synchronization status two files based modification times: - \"newer left, older right dir\": Left file newer right file. - \"older left, newer right dir\": Right file newer left file. - \"date\": files modification time.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy files from right directory to left directory — copy_files_to_left","title":"Copy files from right directory to left directory — copy_files_to_left","text":"function copies files right (source) directory left (destination) directory based provided data frame containing file paths synchronization status.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy files from right directory to left directory — copy_files_to_left","text":"","code":"copy_files_to_left(left_dir, right_dir, files_to_copy, recurse = TRUE)"},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy files from right directory to left directory — copy_files_to_left","text":"left_dir Path left (destination) directory. right_dir Path right (source) directory. files_to_copy Data frame containing paths files copy synchronization status. recurse Logical, default TRUE. TRUE: Files copied corresponding subdirectories left directory. subdirectory exist left directory, created. FALSE: Files copied top level left directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy files from right directory to left directory — copy_files_to_left","text":"Invisible TRUE upon successful completion file copying process.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_left.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy files from right directory to left directory — copy_files_to_left","text":"function performs following steps: Checks source (right) destination (left) directories exist creates destination directory already exist. Copies files right directory corresponding subdirectory left directory based provided file paths.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy files from left to right directory — copy_files_to_right","title":"Copy files from left to right directory — copy_files_to_right","text":"function copies files source directory (left_dir) destination directory (right_dir) based provided data frame containing file paths synchronization status.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy files from left to right directory — copy_files_to_right","text":"","code":"copy_files_to_right(left_dir, right_dir, files_to_copy, recurse = TRUE)"},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy files from left to right directory — copy_files_to_right","text":"left_dir Path source directory (left/leader). right_dir Path destination directory (right/follower). files_to_copy Data frame containing paths files copy synchronization status. recurse Logical, default TRUE. TRUE: Files copied corresponding sub-directories destination folder. subdirectory exist destination, created. FALSE: Files copied top level destination directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy files from left to right directory — copy_files_to_right","text":"Invisible TRUE upon successful completion file copying process.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_files_to_right.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy files from left to right directory — copy_files_to_right","text":"function performs following steps: Checks source destination directories exist creates destination directory already exist. Copies files source directory corresponding subdirectory destination directory based provided file paths.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_temp_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary copy of .syncdrenv to test functions — copy_temp_environment","title":"Create a temporary copy of .syncdrenv to test functions — copy_temp_environment","text":"function creates copy original environment, allowing tests executed without modifying original environment.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/copy_temp_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary copy of .syncdrenv to test functions — copy_temp_environment","text":"","code":"copy_temp_environment()"},{"path":"https://rossanatat.github.io/syncdr/reference/copy_temp_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a temporary copy of .syncdrenv to test functions — copy_temp_environment","text":"list temporary paths left right.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/directory_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about files in a directory — directory_info","title":"Retrieve information about files in a directory — directory_info","text":"function retrieves information files specified directory","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/directory_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about files in a directory — directory_info","text":"","code":"directory_info(dir, recurse = TRUE, ...)"},{"path":"https://rossanatat.github.io/syncdr/reference/directory_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about files in a directory — directory_info","text":"dir character string representing path directory. recurse Logical. TRUE, fully recurse subdirectories. positive number, specifies number levels recurse.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/directory_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information about files in a directory — directory_info","text":"data frame containing detailed information files directory, including information produced fs::file_info().","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_dir_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Display tree structure of one (or two) directory — display_dir_tree","title":"Display tree structure of one (or two) directory — display_dir_tree","text":"Display tree structure one (two) directory","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_dir_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display tree structure of one (or two) directory — display_dir_tree","text":"","code":"display_dir_tree(path_left = NULL, path_right = NULL, recurse = TRUE)"},{"path":"https://rossanatat.github.io/syncdr/reference/display_dir_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display tree structure of one (or two) directory — display_dir_tree","text":"path_left path left directory path_right path right directory recurse logical, default TRUE: show also sub-directories","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_dir_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display tree structure of one (or two) directory — display_dir_tree","text":"directories tree","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_dir_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display tree structure of one (or two) directory — display_dir_tree","text":"","code":"library(syncdr) e = toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s left = e$left right = e$right # Display dir tree of both directories display_dir_tree(path_left = left,                 path_right = right) #> (←)Left directory structure: #> /tmp/RtmpuqzsSS/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   └── D2.Rds #> └── E #> (→)Right directory structure: #> /tmp/RtmpuqzsSS/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds  # Display dir tree of one directory only display_dir_tree(path_right = right) #> (→)Right directory structure: #> /tmp/RtmpuqzsSS/right #> ├── A #> ├── B #> │   ├── B1.Rds #> │   └── B2.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds"},{"path":"https://rossanatat.github.io/syncdr/reference/display_file_actions.html","id":null,"dir":"Reference","previous_headings":"","what":"Display file actions in table — display_file_actions","title":"Display file actions in table — display_file_actions","text":"function displays actions (either \"copy\" \"delete\") performed list files.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_file_actions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display file actions in table — display_file_actions","text":"","code":"display_file_actions(path_to_files, directory, action = c(\"copy\", \"delete\"))"},{"path":"https://rossanatat.github.io/syncdr/reference/display_file_actions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display file actions in table — display_file_actions","text":"path_to_files Data frame containing paths files. data frame column named \"Paths\". directory Character string specifying path directory action taken action Character vector specifying action performed files. Options \"copy\" (default) \"delete\".","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_file_actions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display file actions in table — display_file_actions","text":"console-friendly table files actions","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_sync_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Display status of synchronization/comparison info between two directories in DT table — display_sync_status","title":"Display status of synchronization/comparison info between two directories in DT table — display_sync_status","text":"Display status synchronization/comparison info two directories DT table","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_sync_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display status of synchronization/comparison info between two directories in DT table — display_sync_status","text":"","code":"display_sync_status(sync_status_files, left_path, right_path)"},{"path":"https://rossanatat.github.io/syncdr/reference/display_sync_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display status of synchronization/comparison info between two directories in DT table — display_sync_status","text":"sync_status_files object compare_directories() output, either common_files non_common_files left_path character string specifying path left directory. right_path character string specifying path right directory.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/display_sync_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display status of synchronization/comparison info between two directories in DT table — display_sync_status","text":"DT table showing comparison two directories together synchronization status","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"function filters common files within \"syncdr_status\" object, result 'compare_directories()', according specified filtering criteria: Filtering dependent 'dir' argument, determining primary directory comparison","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"","code":"filter_common_files(   sync_status,   by_date = TRUE,   by_content = FALSE,   dir = \"left\" )"},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"sync_status object class 'syncdr_status' containing synchronization status directory comparison results (common files ). by_date Logical; TRUE, filters based new files specified directory. Default TRUE. by_content Logical; TRUE, filters based new different files specified directory. Default FALSE. dir Character vector specifying primary directory comparison ('left', 'right', '').","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"'syncdr_status' object filtered according specified criteria.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"Filtering Options: by_date: Filters files new specified primary directory ('left', 'right', ). by_date_and_content: Filters files either new different specified primary directory ('left', 'right', ). by_content_only: Filters files different two directories.","code":""},{"path":[]},{"path":"https://rossanatat.github.io/syncdr/reference/filter_common_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter common files in a syncdr_status object based on specified criteria — filter_common_files","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming sync_status is a syncdr_status object filtered_status <- filter_sync_status(sync_status, by_date = TRUE, by_content = TRUE, dir = \"left\") } # }"},{"path":"https://rossanatat.github.io/syncdr/reference/filter_non_common_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter files in a syncdr_status object that are NOT common between two directories compared — filter_non_common_files","title":"Filter files in a syncdr_status object that are NOT common between two directories compared — filter_non_common_files","text":"function filters files common directories compared 'sync_status' object resulting 'compare_directories()'.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_non_common_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter files in a syncdr_status object that are NOT common between two directories compared — filter_non_common_files","text":"","code":"filter_non_common_files(sync_status, dir = \"left\")"},{"path":"https://rossanatat.github.io/syncdr/reference/filter_non_common_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter files in a syncdr_status object that are NOT common between two directories compared — filter_non_common_files","text":"sync_status object class 'syncdr_status' containing information synchronization status directory comparisons. dir Character string specifying directory filter: - \"left\" files unique left directory - \"right\" files unique right directory - \"\" files unique either directory","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/filter_non_common_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter files in a syncdr_status object that are NOT common between two directories compared — filter_non_common_files","text":"updated 'syncdr_status' object filtered files according specified criteria.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"function performs full asymmetric synchronization right directory based left directory. includes following synchronization steps (see Details ):","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"","code":"full_asym_sync_to_right(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   by_date = TRUE,   by_content = FALSE,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). by_date Logical. TRUE, synchronize based file modification dates (default TRUE). by_content Logical. TRUE, synchronize based file contents (default FALSE). recurse Logical. TRUE (default), files copied corresponding subdirectories destination folder. FALSE, files copied top level destination folder without creating subdirectories exist. force Logical. TRUE (default), directly perform synchronization directories. FALSE, Displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"common files: comparing date (by_date = TRUE): Copy files newer left directory right directory. comparing date content (by_date = TRUE by_content = TRUE): Copy files newer different left directory right directory. comparing content (by_content = TRUE): Copy files different left directory right directory. Copy right directory files exist left directory. Delete right directory files exclusive right directory (.e., missing left directory)","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_asym_sync_to_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full asymmetric synchronization to right directory — full_asym_sync_to_right","text":"","code":"# Create syncdr environment with toy directories library(syncdr) e <- toy_dirs() #> ■■■■■■■■■■■■■■■                   47% | ETA:  5s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  1s  # Get left and right directories' paths left  <- e$left right <- e$right  # Synchronize by date & content # Providing left and right paths to directories, as well as by_date and content full_asym_sync_to_right(left_path  = left,                         right_path = right,                         by_date    = FALSE,                         by_content = TRUE) #> ✔ synchronized #>  # Providing sync_status object #sync_status = compare_directories(left_path = left, #                                   right_path = right) #full_asym_sync_to_right(sync_status = sync_status)"},{"path":"https://rossanatat.github.io/syncdr/reference/full_symmetric_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Full symmetric synchronization — full_symmetric_sync","title":"Full symmetric synchronization — full_symmetric_sync","text":"function updates directories following way: common files: date: file one directory newer corresponding file directory, copied update older version. modification dates , action taken date content: file one directory newer different corresponding file directory, copied update older version. modification dates/contents , action taken content : option active non common files: file exists one copied directory","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_symmetric_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full symmetric synchronization — full_symmetric_sync","text":"","code":"full_symmetric_sync(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   by_date = TRUE,   by_content = FALSE,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/full_symmetric_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full symmetric synchronization — full_symmetric_sync","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). by_date logical, TRUE default by_content logical, FALSE default recurse logical, TRUE default. recurse TRUE: copying file source folder destination folder, file copied corresponding (sub)directory. sub(directory) file located exist destination folder (sure), set recurse FALSE, file copied top level force Logical. TRUE (default), directly perform synchronization directories. FALSE, displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_symmetric_sync.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full symmetric synchronization — full_symmetric_sync","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/full_symmetric_sync.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full symmetric synchronization — full_symmetric_sync","text":"","code":"# Create syncdr environment with toy directories e <- toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  # Get left and right directories' paths left  <- e$left right <- e$right  # Synchronize directories, e.g., by date and content # Option 1 - providing left and right paths full_symmetric_sync(left_path  = left,                     right_path = right,                     by_date    = TRUE,                     by_content = TRUE) #> ✔ synchronized #>  # Option 2 - Providing sync_status object sync_status = compare_directories(left_path  = left,                                   right_path = right) full_symmetric_sync(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Hash files by content — hash_files","title":"Hash files by content — hash_files","text":"Hash files content","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hash files by content — hash_files","text":"","code":"hash_files(files_path, verbose = getOption(\"syncdr.verbose\"))"},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hash files by content — hash_files","text":"files_path character vector paths files hash verbose logical; TRUE display progress status hashing. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hash files by content — hash_files","text":"hashes files","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files_in_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Hash files in a directory based on content — hash_files_in_dir","title":"Hash files in a directory based on content — hash_files_in_dir","text":"function calculates hashes files specified directory based content.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files_in_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hash files in a directory based on content — hash_files_in_dir","text":"","code":"hash_files_in_dir(dir_path)"},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files_in_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hash files in a directory based on content — hash_files_in_dir","text":"dir_path character string path directory containing files hashes calculated","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/hash_files_in_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hash files in a directory based on content — hash_files_in_dir","text":"data frame containing file paths corresponding SHA-256 hashes.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_symmetric_sync_common_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","title":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","text":"function updates directories following way: common files: date: file one directory newer corresponding file directory, copied update older version. modification dates , nothing done date content: file one directory newer different corresponding file directory, copied update older version. modification dates/contents , nothing done content : option active non common files: unchanged, .e., keep right right keep left left","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_symmetric_sync_common_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","text":"","code":"partial_symmetric_sync_common_files(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   by_date = TRUE,   by_content = FALSE,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/partial_symmetric_sync_common_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). by_date logical, TRUE default by_content logical, FALSE default recurse logical, TRUE default. recurse TRUE: copying file source folder destination folder, file copied corresponding (sub)directory. sub(directory) file located exist destination folder (sure), set recurse FALSE, file copied top level force Logical. TRUE (default), directly perform synchronization directories. FALSE, displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_symmetric_sync_common_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_symmetric_sync_common_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial symmetric synchronization -common files only — partial_symmetric_sync_common_files","text":"","code":"# Create syncdr environment with toy directories e <- toy_dirs() #> ■■■■■■■■■■■■■■■                   47% | ETA:  5s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  1s  # Get left and right directories' paths left  <- e$left right <- e$right  # Synchronize directories, e.g., by date # Option 1 - providing left and right paths full_symmetric_sync(left_path  = left,                     right_path = right,                     by_date    = TRUE) #> ✔ synchronized #>  # Option 2 - Providing sync_status object sync_status = compare_directories(left_path  = left,                                   right_path = right) full_symmetric_sync(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/reference/partial_update_missing_files_asym_to_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","title":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","text":"update non common files right directory based left one -.e., function : common_files: nothing, left unchanged non common files, copy files left right keep right files right (.e., files 'missing left')","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_update_missing_files_asym_to_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","text":"","code":"partial_update_missing_files_asym_to_right(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/partial_update_missing_files_asym_to_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). recurse logical, TRUE default. recurse TRUE: copying file source folder destination folder, file copied corresponding (sub)directory. sub(directory) file located exist destination folder (sure), set recurse FALSE, file copied top level force Logical. TRUE (default), directly perform synchronization directories. FALSE, Displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_update_missing_files_asym_to_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/partial_update_missing_files_asym_to_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial asymmetric asymmetric synchronization of non common files — partial_update_missing_files_asym_to_right","text":"","code":"# Compare directories with 'compare_directories()' e <- toy_dirs() #> ■■■■■■■■■                         27% | ETA:  8s #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s  # Get left and right directories' paths left  <- e$left right <- e$right  # Option 1 partial_update_missing_files_asym_to_right(left_path  = left,                                            right_path = right) #> ✔ synchronized #>  # Option 2 sync_status = compare_directories(left,                                   right) partial_update_missing_files_asym_to_right(sync_status = sync_status) #> ✔ synchronized #>"},{"path":"https://rossanatat.github.io/syncdr/reference/print.syncdr_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Synchronization Status — print.syncdr_status","title":"Print Synchronization Status — print.syncdr_status","text":"Print Synchronization Status","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/print.syncdr_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Synchronization Status — print.syncdr_status","text":"","code":"# S3 method for class 'syncdr_status' print(x, ...)"},{"path":"https://rossanatat.github.io/syncdr/reference/print.syncdr_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Synchronization Status — print.syncdr_status","text":"x object syncdr_status class created compare_directories ... additional arguments","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/print.syncdr_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Synchronization Status — print.syncdr_status","text":"prints syncdr_status object","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/rs_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Set theme for colorDF — rs_theme","title":"Set theme for colorDF — rs_theme","text":"Set theme colorDF","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/rs_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set theme for colorDF — rs_theme","text":"","code":"rs_theme()"},{"path":"https://rossanatat.github.io/syncdr/reference/rs_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set theme for colorDF — rs_theme","text":"invisible RStudio theme","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/search_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for duplicate files in a directory — search_duplicates","title":"Search for duplicate files in a directory — search_duplicates","text":"function searches duplicate files within directory based content. Duplicate files identified either filename content different filenames content.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/search_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for duplicate files in a directory — search_duplicates","text":"","code":"search_duplicates(dir_path, verbose = TRUE)"},{"path":"https://rossanatat.github.io/syncdr/reference/search_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for duplicate files in a directory — search_duplicates","text":"dir_path character string representing path directory search duplicates verbose Logical. TRUE, displays list duplicate files found (default TRUE)","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/search_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for duplicate files in a directory — search_duplicates","text":"data frame containing information duplicate files (invisible default)","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/search_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for duplicate files in a directory — search_duplicates","text":"","code":"library(syncdr) e = toy_dirs() #> ■■■■■■■■■■■■■■■                   47% | ETA:  5s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  1s search_duplicates(dir_path = e$left) #>  #> ── Duplicates in /tmp/RtmpuqzsSS/left ────────────────────────────────────────── #> */C/C1.Rds #> */C/C1_duplicate.Rds"},{"path":"https://rossanatat.github.io/syncdr/reference/style_msgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Custom Style to Text — style_msgs","title":"Apply Custom Style to Text — style_msgs","text":"function applies custom color bold style given text string.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/style_msgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Custom Style to Text — style_msgs","text":"","code":"style_msgs(color_name, text)"},{"path":"https://rossanatat.github.io/syncdr/reference/style_msgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Custom Style to Text — style_msgs","text":"color_name Character. Name color apply. color name associated specifically chosen color code. Available options now \"pink\", \"blue\", \"purple\", \"green\". text Character. text string style applied.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/style_msgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Custom Style to Text — style_msgs","text":"styled text printed console.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/style_msgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Custom Style to Text — style_msgs","text":"","code":"syncdr:::style_msgs(\"blue\", \"This is a styled message.\") #> This is a styled message."},{"path":"https://rossanatat.github.io/syncdr/reference/syncdr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"syncdr: Tool for Facilitating Directory Comparison and Updating — syncdr-package","title":"syncdr: Tool for Facilitating Directory Comparison and Updating — syncdr-package","text":"R package directory comparison updates. provides tools facilitate file handling, comparison synchronization directories.","code":""},{"path":[]},{"path":"https://rossanatat.github.io/syncdr/reference/syncdr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"syncdr: Tool for Facilitating Directory Comparison and Updating — syncdr-package","text":"Maintainer: R.Andres Castaneda acastanedaa@worldbank.org Authors: Rossana Tatulli rtatulli@worldbank.org","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create toy directories to test syncdr functions — toy_dirs","title":"Create toy directories to test syncdr functions — toy_dirs","text":"create directories syncdr environment. Directories deleted new R session started","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create toy directories to test syncdr functions — toy_dirs","text":"","code":"toy_dirs(verbose = FALSE)"},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create toy directories to test syncdr functions — toy_dirs","text":"verbose logical: display information. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create toy directories to test syncdr functions — toy_dirs","text":"syncdr environment toy directory paths, .e., left right paths","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create toy directories to test syncdr functions — toy_dirs","text":"function little slow must use Sys.sleep() save files name different time stamp.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/toy_dirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create toy directories to test syncdr functions — toy_dirs","text":"","code":"toy_dirs(verbose = TRUE) #> ■■■■■■■■■                         27% | ETA:  8s #> /tmp/RtmpuqzsSS/left #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds #> /tmp/RtmpuqzsSS/right #> ├── A #> │   ├── A1.Rds #> │   ├── A2.Rds #> │   └── A3.Rds #> ├── B #> │   ├── B1.Rds #> │   ├── B2.Rds #> │   └── B3.Rds #> ├── C #> │   ├── C1.Rds #> │   ├── C1_duplicate.Rds #> │   ├── C2.Rds #> │   └── C3.Rds #> ├── D #> │   ├── D1.Rds #> │   ├── D2.Rds #> │   └── D3.Rds #> └── E #>     ├── E1.Rds #>     ├── E2.Rds #>     └── E3.Rds #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  5s"},{"path":"https://rossanatat.github.io/syncdr/reference/update_missing_files_asym_to_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","title":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","text":"update non common files right directory based left one -.e., function : common_files: nothing, left unchanged non common files, copy files left right delete right files right (.e., files 'missing left')","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/update_missing_files_asym_to_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","text":"","code":"update_missing_files_asym_to_right(   left_path = NULL,   right_path = NULL,   sync_status = NULL,   recurse = TRUE,   force = TRUE,   backup = FALSE,   backup_dir = \"temp_dir\",   verbose = getOption(\"syncdr.verbose\") )"},{"path":"https://rossanatat.github.io/syncdr/reference/update_missing_files_asym_to_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","text":"left_path Path left/first directory. right_path Path right/second directory. sync_status Object class \"syncdr_status\", output compare_directories(). recurse logical, TRUE default. recurse TRUE: copying file source folder destination folder, file copied corresponding (sub)directory. sub(directory) file located exist destination folder (sure), set recurse FALSE, file copied top level force Logical. TRUE (default), directly perform synchronization directories. FALSE, Displays preview actions prompts user confirmation proceeding. Synchronization aborted user agree. backup Logical. TRUE, creates backup right directory synchronization. backup stored location specified backup_dir. backup_dir Path directory backup original right directory stored. specified, backup stored temporary directory (tempdir). verbose logical. TRUE, display directory tree synchronization. Default FALSE","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/update_missing_files_asym_to_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","text":"Invisible TRUE indicating successful synchronization.","code":""},{"path":"https://rossanatat.github.io/syncdr/reference/update_missing_files_asym_to_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full asymmetric synchronization of non common files — update_missing_files_asym_to_right","text":"","code":"# Compare directories with 'compare_directories()' e <- toy_dirs() #> ■■■■■■■                           20% | ETA:  8s #> ■■■■■■■■■■■■■■■■■                 53% | ETA:  6s  # Get left and right directories' paths left  <- e$left right <- e$right  # Option 1 update_missing_files_asym_to_right(left_path  = left,                                    right_path = right) #> ✔ synchronized #>  # Option 2 sync_status = compare_directories(left,                                   right)  update_missing_files_asym_to_right(sync_status = sync_status) #> ✔ synchronized #>"}]
